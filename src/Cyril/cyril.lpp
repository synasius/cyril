%{
#include "y.tab.h"
extern int line_no;

%}

%option noyywrap
%%
[ \t]                   ; // Ignore whitespace
\/\/.*\n               { line_no++;} // Ignore comments
\(            { return LEFT; }
\)            { return RIGHT; }
\*            { return MULT; }
\/            { return DIV; }
\+            { return PLUS; }
\%            { return MOD; }
\-            { return MINUS; }
and|\&|\&\&       { return AND; }
or|\||\|\|       { return OR; }
\=|\=\=        { return EQ; }
\!=            { return NOTEQ; }
\<            { return LESS; }
\<=            { return LESSEQ; }
\>            { return GR; }
\>=            { return GREQ; }
\!            { return NOT; }
shape       { return SHAPE; }
tile       { return TILE; }
anim       { return ANIM; }
next       { return NEXT; }
particle       { return PARTICLE; }
palette       { return PALETTE; }
blink       { return BLINK; }
do             { return DO; }
for          { return FOR; }
to          { return TO; }
step          { return STEP; }
until          { return UNTIL; }
times          { return TIMES; }
if          { return IF; }
init          { return INIT; }
while          { return WHILE; }
end            { return END; }
(\#)([0-9A-Fa-f]{6})       {
                          yylval.sval = strdup(yytext + 1);
                          return HEX_COLOR;
                        }
(-)?[0-9]+(\.[0-9]+)?   {
                          yylval.fval = atof(yytext);
                          return NUMBER;
                        }
fft|lerp|rgb|hsb|hsv|wave|sin|cos|tan|noise|rand|map|pal { yylval.sval = strdup(yytext);
  return FUNCTION;
}
die|vert|img|box|ball|sphere|line|rect|cone|peg|grid|move { yylval.sval = strdup(yytext);
  return KEYWORD;
}
debug|color|background|ballDetail|sphereDetail|light { yylval.sval = strdup(yytext);
  return KEYWORD;
}
fxK|fxNW|fxP|fxB|lightOn|lightOff|lightPosition|lightColor|lightHighlight { yylval.sval = strdup(yytext);
  return KEYWORD;
}
rotate|fill|stroke|push|pushMatrix|pop|popMatrix|scale|fill|noFill { yylval.sval = strdup(yytext);
  return KEYWORD;
}
white|gray|black|red|green|blue|cyan|magenta|yellow|aliceBlue|antiqueWhite|aqua|aquamarine|azure|beige|bisque|blanchedAlmond|blueViolet|brown|burlyWood|cadetBlue|chartreuse|chocolate|coral|cornflowerBlue|cornsilk|crimson|darkBlue|darkCyan|darkGoldenRod|darkGray|darkGrey|darkGreen|darkKhaki|darkMagenta|darkOliveGreen|darkorange|darkOrchid|darkRed|darkSalmon|darkSeaGreen|darkSlateBlue|darkSlateGray|darkSlateGrey|darkTurquoise|darkViolet|deepPink|deepSkyBlue|dimGray|dimGrey|dodgerBlue|fireBrick|floralWhite|forestGreen|fuchsia|gainsboro|ghostWhite|gold|goldenRod|grey|greenYellow|honeyDew|hotPink|indianRed|indigo|ivory|khaki|lavender|lavenderBlush|lawnGreen|lemonChiffon|lightBlue|lightCoral|lightCyan|lightGoldenRodYellow|lightGray|lightGrey|lightGreen|lightPink|lightSalmon|lightSeaGreen|lightSkyBlue|lightSlateGray|lightSlateGrey|lightSteelBlue|lightYellow|lime|limeGreen|linen|maroon|mediumAquaMarine|mediumBlue|mediumOrchid|mediumPurple|mediumSeaGreen|mediumSlateBlue|mediumSpringGreen|mediumTurquoise|mediumVioletRed|midnightBlue|mintCream|mistyRose|moccasin|navajoWhite|navy|oldLace|olive|oliveDrab|orange|orangeRed|orchid|paleGoldenRod|paleGreen|paleTurquoise|paleVioletRed|papayaWhip|peachPuff|peru|pink|plum|powderBlue|purple|rosyBrown|royalBlue|saddleBrown|salmon|sandyBrown|seaGreen|seaShell|sienna|silver|skyBlue|slateBlue|slateGray|slateGrey|snow|springGreen|steelBlue|blueSteel|tanC|teal|thistle|tomato|turquoise|violet|wheat|whiteSmoke|yellowGreen { yylval.sval = strdup(yytext);
  return COLOR_NAME;
}
\$[a-zA-Z0-9_]+ { yylval.sval = strdup(yytext);
return PALETTE_NAME;
}
\#[a-zA-Z0-9_]+ { yylval.sval = strdup(yytext);
return COLOR_VAR;
}
[a-zA-Z0-9_]+ { yylval.sval = strdup(yytext);
return LABEL;
}
\n                      return ENDL;
\:                      return ASSIGN;
\,                      return COMMA;
%%

void scannerRestart() {
  YY_FLUSH_BUFFER;
}

int yycyrilParseString(const char *str) {
  line_no = 0;
  yy_scan_string(str);
  return yyparse();
  //printf(str);
}





